Day-5(Miscellaneous Problem Solving):
Introduction to Dynamic Programming
Fibonacci Series using Dynamic Programming
Solving Problems using Regex.
Java-8-17 Overview
----------------------------------------------------------------------------------------------------------------------------------------------------------
Q1.Egg Dropping Puzzle
Imagine that you have N eggs and you have to determine from which K-floor of a building, you can drop an egg such that it doesn't break. You have to determine the minimum number of attempts. Which you need in order to find the critical floor in the worst case while using the best strategy. There are few rules given below:

An egg that survives a fall can be used again.
A broken egg must be discarded.
The effect of a fall is the same for all the eggs.
If the egg doesn't break on a certain floor, it will not break on any of the floors below the present floor.
If the eggs break at a certain floor, they will break at any of the floors above the present floor.


Format:

Input:

The first line of input is T denoting the number of test cases. Then each of the T lines contains two positive integers N and K. Where 'N' is the number of eggs and 'K' is the number of floors in a building.

Output:

For each test case, print a single line containing one integer. Which gives the minimum number of attempts you need in order to find a critical floor.



Constraints:

1 <= T <= 30

1 <= N <= 10

1 <= K <= 50



ï»¿Example:

Input:

2

2 10

3 5

Output:

4

3


Case 1
Case 2
Input (stdin)
2
2 10
3 5

Output (stdout)
4
3


Input (stdin)
1
9 49

Output (stdout)
6

Solution:
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int T = scanner.nextInt(); // Number of test cases
        while (T-- > 0) {
            int N = scanner.nextInt(); // Number of eggs
            int K = scanner.nextInt(); // Number of floors
            int[][] dp = new int[N + 1][K + 1];

            // Initialize the base cases
            for (int i = 0; i <= N; i++) {
                dp[i][0] = 0; // If there are no floors, no attempts are needed
                dp[i][1] = 1; // If there is one floor, only one attempt is needed
            }
            for (int j = 1; j <= K; j++) {
                dp[1][j] = j; // If there is one egg, attempts are equal to the number of floors
            }

            // Fill the dp array using bottom-up dynamic programming approach
            for (int i = 2; i <= N; i++) {
                for (int j = 2; j <= K; j++) {
                    dp[i][j] = Integer.MAX_VALUE;
                    for (int x = 1; x <= j; x++) {
                        int res = 1 + Math.max(dp[i - 1][x - 1], dp[i][j - x]);
                        if (res < dp[i][j]) {
                            dp[i][j] = res;
                        }
                    }
                }
            }

            System.out.println(dp[N][K]); // Output the minimum number of attempts
        }
        scanner.close();
    }
}



----------------------------------------------------------------------------------------------------------------------------------------------------------
Q2.Coin Turn Game
Consider a row of n coins. We play a game against an opponent by alternative turns. In each turn, a player selects either the first or last coin from the row. Now remove it from the row permanently and take the value of a coin. Find the maximum possible amount of money.



Example:

Input:

4

5 3 7 10

Output:

15


Case 1
Case 2
Case 3
Case 6
Case 7
Case 8
Case 9
Case 10
Input (stdin)
4
5 3 7 10

Output (stdout)
15


Input (stdin)
7
8 15 3 7 10 22 5

Output (stdout)
26



Input (stdin)
8
10 3 8 2 6 7 15 1

Output (stdout)
39


Input (stdin)
5
1 2 3 4 5

Output (stdout)
9


Input (stdin)
7
11 22 33 44 55 66 88

Output (stdout)
187

Solution:
import java.util.Scanner;

public class Main {

    public static int maxMoney(int[] coins, int start, int end) {
        if (start == end) {
            return coins[start];
        }

        if (end == start + 1) {
            return Math.max(coins[start], coins[end]);
        }

        // If player1 chooses start, player2 can choose from start+1 to end
        int chooseStart = coins[start] + Math.min(maxMoney(coins, start + 2, end), maxMoney(coins, start + 1, end - 1));
        // If player1 chooses end, player2 can choose from start to end-1
        int chooseEnd = coins[end] + Math.min(maxMoney(coins, start + 1, end - 1), maxMoney(coins, start, end - 2));

        return Math.max(chooseStart, chooseEnd);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] coins = new int[n];

        for (int i = 0; i < n; i++) {
            coins[i] = scanner.nextInt();
        }

        System.out.println(maxMoney(coins, 0, n - 1));
        scanner.close();
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------
Q3.You are given a string representing a phone number in the format (XXX) XXX-XXXX. Your task is to validate whether the given string is a 
valid phone number or not.
Input:
Enter a phone number:
(123) 456-7890

Output:
true

Solution:
import java.util.Scanner;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a phone number:");
        String phoneNumber = scanner.nextLine();
        boolean isValid = isValidPhoneNumber(phoneNumber);
        System.out.println("Is valid phone number? " + isValid);
        scanner.close();
    }

    public static boolean isValidPhoneNumber(String phoneNumber) {
        String regex = "\\(\\d{3}\\) \\d{3}-\\d{4}";
        return Pattern.matches(regex, phoneNumber);
    }
}



----------------------------------------------------------------------------------------------------------------------------------------------------------
Q4.You are given a string containing a list of email addresses separated by commas. Your task is to extract all the email addresses from the string.

input:
Contact us at test@guvi.in or lavish@guvi.in

Output:
 [test@guvi.in, lavish@guvi.in]

Solution:
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a string containing email addresses separated by commas:");
        String text = scanner.nextLine();
        List<String> extractedEmails = extractEmails(text);
        System.out.println("Extracted emails: " + extractedEmails);
        scanner.close();
    }

    public static List<String> extractEmails(String text) {
        List<String> emails = new ArrayList<>();
        Pattern pattern = Pattern.compile("\\b[\\w.%+-]+@[\\w.-]+\\.[a-zA-Z]{2,}\\b");
        Matcher matcher = pattern.matcher(text);
        while (matcher.find()) {
            emails.add(matcher.group());
        }
        return emails;
    }
}



----------------------------------------------------------------------------------------------------------------------------------------------------------
Q5.You are given a string containing a word. Your task is to check if the word starts with the letter 'A' or 'a'.

Input:
apple

Output:
True

Solution:
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a word:");
        String word = scanner.next();
        boolean startsWithA = word.matches("[Aa]\\w*");
        System.out.println("Starts with 'A' or 'a'? " + startsWithA);
        scanner.close();
    }
}



----------------------------------------------------------------------------------------------------------------------------------------------------------
Q6.You are given a string representing a sentence. Your task is to check if the sentence ends with a question mark.
Input:
How are you?


Output:
true

SOlution:
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a sentence:");
        String sentence = scanner.nextLine();
        boolean endsWithQuestionMark = sentence.matches(".*\\?$");
        System.out.println("Ends with a question mark? " + endsWithQuestionMark);
        scanner.close();
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
Q7.Write a program to find the nth Fibonacci number using dynamic programming.
Input:6
Output:8

Solution:
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the value of n:");
        int n = scanner.nextInt();
        int fibonacciNumber = findFibonacci(n);
        System.out.println("The " + n + "th Fibonacci number is: " + fibonacciNumber);
        scanner.close();
    }

    public static int findFibonacci(int n) {
        int[] fib = new int[n + 1];
        fib[0] = 0;
        fib[1] = 1;
        for (int i = 2; i <= n; i++) {
            fib[i] = fib[i - 1] + fib[i - 2];
        }
        return fib[n];
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------
Q8.Write a program to check if a given string contains only digits
Sample Input:
12345

Output:
true


Solution:
import java.util.Scanner;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        boolean onlyDigits = input.matches("\\d+");
        System.out.println(onlyDigits);
        scanner.close();
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------
Q9.Write a program to extract all digits from a given string.
Sample Input:
abc123xyz

Sample Output:
123

Solution:
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a string:");
        String input = scanner.nextLine();
        String digits = extractDigits(input);
        System.out.println("Extracted digits: " + digits);
        scanner.close();
    }

    public static String extractDigits(String input) {
        StringBuilder result = new StringBuilder();
        Pattern pattern = Pattern.compile("\\d");
        Matcher matcher = pattern.matcher(input);
        while (matcher.find()) {
            result.append(matcher.group());
        }
        return result.toString();
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------
Q10.Write a program to replace all vowels in a given string with the character '*'.

Sample input:
guvi geek

Sample Output:
g*v* g**k


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String result = input.replaceAll("[AEIOUaeiou]", "*");
        System.out.println(result);
        scanner.close();
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------